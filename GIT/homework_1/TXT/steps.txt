35_Channel, [20.06.2023 06:35]
GIT Homework 1

Для выполнения задания у вас должен быть установлен для Windows - GitBash.
Создан аккаунт в GitHub

Все шаги сценария выполняйте в терминале GitBush, Terminal, в папке под гитом.

Как отправить ДЗ на проверку.
 1. Создайте текстоовый файл как в первом ДЗ по Terminal.
 2. Сценарий перенесите в этот файл.
 3. На против каждого действия - напишите команду в GitBash

Файл со сценарием и ссылку на свой гит хаб.

JSON
4. Создать внешний репозиторий c названием JSON.
5. Клонировать репозиторий JSON на локальный компьютер.
	git clone https://github.com/NikitaMogilev/JSON.git
 
6. Внутри локального JSON создать файл “new.json”.
	touch new.json
 
7. Добавить файл под гит.
	git add new.json
 
8. Закоммитить файл.
	git commit -m "Add new JSON file"
 
9. Отправить файл на внешний GitHub репозиторий.
	git push origin [дефолтное название репо] main [название ветки]
 
10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
	nano new.json 
{
        "name_surname": "Nikita_Mogilev",
        "age": "34",
        "pets_number": "1",
        "expected_salary": "1500$"
}
Ctrl+X, Yes (Y), Enter

11. Отправить изменения на внешний репозиторий.
	git commit -am "Added  data in new.json"
 
12. Создать файл preferences.json
	touch preferences.json

13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
	nano preferences.json
{
	"film": "The Shawshank Redemption",
	"serial": Supernatural"
	"food": "fried shrimp",
	"season": "summer",
	"country": "Vietnam"
}
Ctrl+X, Yes (Y), Enter

14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
	nano skills.json
{
	"skills": [
		   "1. Базовая теория (Что такое тестирование, багрепорты, \nдокументация, виды, методы, направления тестирования \nи т.п.) SDLC, STLC.",
		   "2. Что такое клиент-серверная архитектура.",
		   "3. HTTP Методы запросов на сервер.",
		   "4. Коды ответов HTTP сервера.",
		   "5. Структуры HTTP запросов и ответов.",
		   "6. Что такое JSON, XML. Их структура.",
		   "7. Тестирование API через Postman (JS, автотесты API).",
		   "8. Снятие и чтение логов c внешнего сервера.",
		   "9. Снифинг http web трафика через Charles и Fiddler.",
		   "10. Dev Tools веб браузеров (Google Chrome, FireFox).",
		   "11. VPN. (Как работает, зачем нужен, как использовать,\n варианты инструментов)",
		   "12. Мобильное тестирование.",
		   "13. Особенность iOS, Android, гайдлайны.",
		   "14. Сборка iOS приложений на XCode. (У кого нет Mac\n компьютера, просто посмотрят)",
 		   "15. Сборка Android приложений на Android Studio.",
		   "16. ADB (управление андройд девайсами).",
		   "17. Настройка прокси и vpn на iOS и Android.",
		   "18. Перехват (сниффинг) мобильного трафика через Charles\n и Fiddler на iOS и Android.",
		   "19. Командная строка (terminal) Linux (копирование,\n создание, просмотр, перемещение файлов на серверах\n без графического интерфейса)",
		   "20. Основы bash скриптинг, автоматизация рутинных задач\n на сервере.",
		   "21. Доступ к удалённым серверам.",
		   "22. Основы SQL (Create, Delete, Drop, Insert Into,\n Select, From, Where, Join).",
		   "23. База данных Postgres (установка, настройка и\n использование)."
		   "24. Нереляционная база данных Redis (установка,\n настройка и использование).",
		   "25. Нагрузочное тестирование в Jmeter.",
		   "26. Методология разработки Scrum."
		   "27. Техники тест-дизайна (Классы эквивалентности,\n граничные значения, комбинаторные техники\n (Попарный, ортогональный, базовый выбор, каждый\n выбор), состояния и переходы)",
		   "28. Python. (Изучение основ. Создание клиент серверного\n приложения)"
		   ]
}
 
 
15. Отправить сразу 2 файла на внешний репозиторий.
	git add . && git commit -m "new file preferences and skills in JSON" && git push origin main

16. На веб интерфейсе создать файл bug_report.json.
17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
20. Синхронизировать внешний и локальный репозиторий JSON
	git pull origin main


XML
21. Создать внешний репозиторий c названием XML.
22. Клонировать репозиторий XML на локальный компьютер.
	cd ..
	git clone git@github.com:NikitaMogilev/XML.git
23. Внутри локального XML создать файл “new.xml”.
	touch new.xml

24. Добавить файл под гит.
	git add new.xml
 
25. Закоммитить файл.
	git commit -m "Added new XML file"
 
26. Отправить файл на внешний GitHub репозиторий.
	git push origin main
 
27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
	nano new.xml
<?xml version="1.0" encoding="UTF-8"?>
<req>
<name_surname name="Nikita_Mogilev">
<Age>34</Age>
<pets_number>1</pets_number>
<expected_salary>"1500$"</expected_salary>
</name_surname>
</req>
 Ctrl+X, Yes (Y), Enter
 
28. Отправить изменения на внешний репозиторий.
	git push origin main
 
29. Создать файл preferences.xml
	touch preferences.xml
 
30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.
	nano preferences.xml
<?xml version="1.0" encoding="UTF-8"?>
<req>
	<film>The Shawshank Redemption</film>
	<serial>Supernatural</serial>
	<food>fried shrimp</food>
	<season>summer</season>
	<country>Vietnam</country>
</req>
 
31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
	nano skils.xml
<?xml version="1.0" encoding="UTF-8"?>
<req>
	<skills>
		   <s1>Базовая теория (Что такое тестирование, багрепорты, \nдокументация, виды, методы, направления тестирования \nи т.п.) SDLC, STLC.</s1>
		   <s2>Что такое клиент-серверная архитектура</s2>
		   <s3>HTTP Методы запросов на сервер</s3>
		   <s4>Коды ответов HTTP сервера</s4>
		   <s5>Структуры HTTP запросов и ответов</s5>
		   <s6>Что такое JSON, XML. Их структура</s6>
		   <s7>Тестирование API через Postman (JS, автотесты API)</s7>
		   <s8>Снятие и чтение логов c внешнего сервера</s8>
		   <s9>Снифинг http web трафика через Charles и Fiddler</s9>
		   <s10>Dev Tools веб браузеров (Google Chrome, FireFox)</s10>
		   <s11>VPN. (Как работает, зачем нужен, как использовать,\n варианты инструментов)</s11>
		   <s12>Мобильное тестирование</s12>
		   <s13>Особенность iOS, Android, гайдлайны</s13>
		   <s14>Сборка iOS приложений на XCode. (У кого нет Mac\n компьютера, просто посмотрят)</s14>
 		   <s15>Сборка Android приложений на Android Studio</s15>
		   <s16>ADB (управление андройд девайсами)</s16>
		   <s17>Настройка прокси и vpn на iOS и Android</s17>
		   <s18>Перехват (сниффинг) мобильного трафика через Charles\n и Fiddler на iOS и Android</s18>
		   <s19>Командная строка (terminal) Linux (копирование,\n создание, просмотр, перемещение файлов на серверах\n без графического интерфейса)</s19>
		   <s20>Основы bash скриптинг, автоматизация рутинных задач\n на сервере</s20>
		   <s21>Доступ к удалённым серверам</s21>
		   <s22>Основы SQL (Create, Delete, Drop, Insert Into,\n Select, From, Where, Join)</s22>
		   <s23>База данных Postgres (установка, настройка и\n использование)</s23>
		   <s24>Нереляционная база данных Redis (установка,\n настройка и использование)</s24>
		   <s25>Нагрузочное тестирование в Jmeter</s25>
		   <s26>Методология разработки Scrum</s26>
		   <s27>Техники тест-дизайна (Классы эквивалентности,\n граничные значения, комбинаторные техники\n (Попарный, ортогональный, базовый выбор, каждый\n выбор), состояния и переходы)</s27>
		   <s28>Python. (Изучение основ. Создание клиент серверного\n приложения)</s28>
</req>
 
Ctrl+X, Yes (Y), Enter

32. Сделать коммит в одну строку.
	git add .&&git commit -m "Added skils and preferences file in XML"

 
33. Отправить сразу 2 файла на внешний репозиторий.
	git push origin main
34. На веб интерфейсе создать файл bug_report.xml.
35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
38. Синхронизировать внешний и локальный репозиторий XML
	git pull origin main
	
TXT
1. Создать внешний репозиторий c названием TXT.
2. Клонировать репозиторий TXT на локальный компьютер.
	cd ..
	git clone git@github.com:NikitaMogilev/TXT.git 
 
3. Внутри локального TXT создать файл “new.txt”.
	cd TXT
	touch new.txt

4. Добавить файл под гит.
	git add .

5. Закоммитить файл.
	git commit -m "new txt file"
	
6. Отправить файл на внешний GitHub репозиторий.
	git push origin main
	
7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.
	nano new.txt
	name_surname=Nikita_Mogilev
	age=34
	pets_number=1
	expected_salary=1500$

	Ctrl+X, Yes (Y), Enter

8. Отправить изменения на внешний репозиторий.
	git commit -am "fullfield new.txt"&& git push origin main

9. Создать файл preferences.txt
	touch preferences.txt

10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.

	nano pre*
	"film": "The Shawshank Redemption",
	"serial": Supernatural"
	"food": "fried shrimp",
	"season": "summer",
	"country": "Vietnam"

	Ctrl+X, Yes (Y), Enter

11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT
	touch sklls.txt
	nano skils.txt
	
	Программа курса
	
	1. Базовая теория (Что такое тестирование, багрепорты, документация, виды, методы, направления тестирования и т.п.) SDLC, STLC.
	2. Что такое клиент-серверная архитектура.
	3. HTTP Методы запросов на сервер.
	4. Коды ответов HTTP сервера.
	5. Структуры HTTP запросов и ответов.
	6. Что такое JSON, XML. Их структура.
	7. Тестирование API через Postman (JS, автотесты API).
	8. Снятие и чтение логов c внешнего сервера.
	9. Снифинг http web трафика через Charles и Fiddler.
	10. Dev Tools веб браузеров (Google Chrome, FireFox).
	11. VPN. (Как работает, зачем нужен, как использовать, варианты инструментов)
	12. Мобильное тестирование.
	13. Особенность iOS, Android, гайдлайны.
	14. Сборка iOS приложений на XCode. (У кого нет Mac компьютера, просто посмотрят)
	15. Сборка Android приложений на Android Studio.
	16. ADB (управление андройд девайсами).
	17. Настройка прокси и vpn на iOS и Android.
	18. Перехват (сниффинг) мобильного трафика через Charles и Fiddler на iOS и Android.
	19. Командная строка (terminal) Linux (копирование, создание, просмотр, перемещение файлов на серверах без графического интерфейса)
	20. Основы bash скриптинг, автоматизация рутинных задач на сервере.
	21. Доступ к удалённым серверам.
	22. Основы SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join).
	23. База данных Postgres (установка, настройка и использование).
	24. Нереляционная база данных Redis (установка, настройка и использование).
	25. Нагрузочное тестирование в Jmeter.
	26. Методология разработки Scrum.
	27. Техники тест-дизайна (Классы эквивалентности, граничные значения, комбинаторные техники (Попарный, ортогональный, базовый выбор, каждый 			выбор), состояния и переходы)
	28. Python. (Изучение основ. Создание клиент серверного приложения)
	
12. Сделать коммит в одну строку.
	git add . && git commit -m "new file preferences and skills in TXT" 

13. Отправить сразу 2 файла на внешний репозиторий.
	git push origin main
	
14. На веб интерфейсе создать файл bug_report.txt.
15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
18. Синхронизировать внешний и локальный репозиторий TXT
